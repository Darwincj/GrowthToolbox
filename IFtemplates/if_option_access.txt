
% Functions for setting up and accessing user-defined model options.
%
% GFtbox_selectModel sets up what options exist, what values they can take,
% and which value is selected for each option.  This will usually be called
% by every model.  When a new interaction function is generated, it
% includes a call of this with dummy arguments as an example.  The
% generated i.f. also includes a call of GFtbox_modelOptions to sput the
% current set of options in a struct called OPTIONS, from where they can be
% conveniently accessed.
%
% GFtbox_resolveModelSelection can be used to enforce consistency
% requirements among your options.
%
% You will not need to call GFtbox_modelOptions

    function GFtbox_selectModel( varargin )
        % Arguments are in triples: field name, cell array of possible
        % values, and actual value.  If there is not a finite set of
        % possible values, use the empty cell array.
        % The cell arrays are installed in m.userdata.ranges, and the
        % actual values are selected.  The actual value must occur in the
        % corresponding cell array, or an error is thrown.
        % The actual values are reported.
        for i=1:3:(nargin-2)
            field = varargin{i};
            values = varargin{i+1};
            value = varargin{i+2};
            if isempty(values)
                values = {value};
            end
            m.userdata.ranges.(field).range = values;
            GFtbox_getOptionIndex( field, value );
        end
    end

    function GFtbox_resolveModelSelection( if_field, if_value, then_field, then_value )
        % Impose a consistency requirement on the model options: if
        % if_field has if_value, then then_field is set to then_value.
        matching = strcmp( m.userdata.ranges.(if_field).range{m.userdata.ranges.(if_field).index}, if_value );
        match1 = find( matching, 1 );
        if ~isempty(match1)
            GFtbox_getOptionIndex( then_field, then_value );
        end
    end

    function GFtbox_getOptionIndex( field, value )
        if ischar(value)
            m.userdata.ranges.(field).index = find(strcmp(m.userdata.ranges.(field).range,value),1);
        else
            m.userdata.ranges.(field).index = find(cell2mat(m.userdata.ranges.(field).range)==value,1);
        end
        if isempty( m.userdata.ranges.(field).index )
            fprintf( 'Option %s has unknown value %s, alternatives are:\n    ', field, value );
            fprintf( 1, ' %s', m.userdata.ranges.(field).range{:} );
            fprintf( 1, '\n' );
            error( 'Terminating simulation' );
        end
        m.userdata.ranges.(field).value = value;
    end
    
